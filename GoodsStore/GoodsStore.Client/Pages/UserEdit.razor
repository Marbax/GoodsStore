@page "/User/Edit"
@page "/User/Edit/{ItemId:int}"
@inject IGenericItemVM<UserDTO> _vm
@inject IGenericCollectionVM<RoleDTO> _roles

@if (!_vm.IsReady)
{
    <Loading Title="User is loading." />
}
else
{
    <label class="text-muted mx-2">@_vm.Message</label>

    <EditForm Model="@_vm" OnValidSubmit="@HandleValidSubmit">
        <ValidationSummary />
        <div class="col-6 m-2">
            <InputText type="text" @bind-Value="_vm.Item.Email" name="email" class="form-control" placeholder="Email address" />
            <ValidationMessage For="@(() => _vm.Item.Email)" />
        </div>
        <div class="col-6 m-2">
            <InputText type="password" @bind-Value="_vm.Item.Password" name="password" class="form-control" placeholder="Password" />
            <ValidationMessage For="@(() => _vm.Item.Password)" />
        </div>

        <div class="col-6 m-2">
            <InputText type="text" @bind-Value="_vm.Item.Address" name="address" class="form-control" placeholder="Address" />
            <ValidationMessage For="@(() => _vm.Item.Address)" />
        </div>
        <div class="col-6 m-2">
            <InputText type="text" @bind-Value="_vm.Item.Country" name="country" class="form-control" placeholder="Country" />
            <ValidationMessage For="@(() => _vm.Item.Country)" />
        </div>
        <div class="col-6 m-2">
            <InputText type="text" @bind-Value="_vm.Item.Name" name="email" class="form-control" placeholder="First Name" />
            <ValidationMessage For="@(() => _vm.Item.Name)" />
        </div>
        <div class="col-6 m-2">
            <InputText type="text" @bind-Value="_vm.Item.Lastname" name="lastname" class="form-control" placeholder="Last Name" />
            <ValidationMessage For="@(() => _vm.Item.Lastname)" />
        </div>
        <div class="col-6 m-2">
            <InputText type="text" @bind-Value="_vm.Item.Phone" name="phone" class="form-control" placeholder="Phone" />
            <ValidationMessage For="@(() => _vm.Item.Phone)" />
        </div>
        <div class="col-6 m-2">
            <InputText type="text" disabled @bind-Value="_vm.Item.Token" name="phone" class="form-control" placeholder="Token" />
        </div>
        @if (_roles.IsReady)
        {
            //TODO: make it looks like some tag list
            <label class="control-label col-md-4" for="title">Roles:</label>
            <div class="col-6 m-2">
                @foreach (var item in _roles.Items)
                {
                    <span class="mx-2">
                        <label for="@($"{item.Id}_{item.Title}")">@item.Title</label>
                        <input type="checkbox" id="@($"{item.Id}_{item.Title}")"
                               checked=@(_vm.Item.RoleIds.Count()>0 && _vm.Item.RoleIds.Contains(item.Id))
                               @onchange="@((e) => CheckboxChanged(e, item.Id))" />
                    </span>
                }
            </div>
        }
        @if (ItemId > 0)
        {
            <button class="btn btn-primary" type="submit">Update</button>
        }
        else
        {
            <button class="btn btn-primary" type="submit">Add</button>
        }
    </EditForm>
}

@code {
    [Parameter]
    public int ItemId { get; set; } = -1;

    protected override async Task OnInitializedAsync()
    {
        if (ItemId > 0)
            await _vm.GetItemAsync(ItemId);
        else
            _vm.Item = new UserDTO();
        await _roles.GetItemsAsync();
    }

    private async Task HandleValidSubmit()
    {
        if (ItemId > 0)
            await _vm.UpdateItem();
        else
            await _vm.AddItem();
    }

    private void CheckboxChanged(ChangeEventArgs e, int id)
    {
        var userRoles = _vm.Item.RoleIds.ToList();
        if ((bool)e.Value == true)
        {
            userRoles.Add(id);
            _vm.Item.RoleIds = userRoles;
        }
        else if ((bool)e.Value == false)
        {
            userRoles.RemoveAll(i => i == id);
            _vm.Item.RoleIds = userRoles;
        }
    }

}
