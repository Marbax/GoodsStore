@page "/Administration/category"
@inject IGenericCollectionVM<CategoryDTO> _catsVM
@inject IJSRuntime JS
@implements IDisposable
@inject IStringLocalizer<Resource> localizer
@layout AdminiistrationLayout
@inject NavigationManager _navMngr

<MudText class="text-muted">@_catsVM?.Message</MudText>

<MudPaper Elevation="4" Class="my-2 d-flex justify-content-start">
    <MudButton Class="mud-secondary-text ma-2" OnClick=Add>@localizer["Add"]</MudButton>
    <MudButton Class="mud-secondary-text ma-2" OnClick=_catsVM.GetItemsAsync>@localizer["Refresh"]</MudButton>
</MudPaper>

<MudDivider />

@if (!_catsVM.IsReady)
{
    <Loading>@localizer["Loading"]...</Loading>
}
else
{
    <MudTable Items="@_catsVM.Items" Dense="true" Hover="true" Bordered="false" Striped="true" Filter="new Func<CategoryDTO,bool>(FilterTable)"
              FixedHeader="true" FixedFooter="true" Height="45vh" SortLabel="@localizer["SortBy"]" Virtualize="true" Elevation="4"
              @bind-SelectedItem="_selectedItem" Breakpoint="Breakpoint.Sm" Loading="@(!_catsVM.IsReady)" LoadingProgressColor="Color.Info"
              Class="my-2">
        <ToolBarContent>
            <MudText Typo="Typo.h5">@localizer["Categories"]</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder=@localizer["Search"] Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mud-primary-text"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel Enabled="true" InitialDirection="SortDirection.Ascending" SortBy="new Func<CategoryDTO, object>(x=>x.Id)">@localizer["Id"]</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel Enabled="true" InitialDirection="SortDirection.Ascending" SortBy="new Func<CategoryDTO, object>(x=>x.Title)">@localizer["Title"]</MudTableSortLabel>
            </MudTh>
            <MudTh>@localizer["Actions"]</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="@localizer["Id"]">@context.Id</MudTd>
            <MudTd DataLabel="@localizer["Title"]">@context.Title</MudTd>
            <MudTd DataLabel="@localizer["Actions"]">
                <MudButton Class="mud-secondary-text" Disabled="@(context.Goods.Count() > 0)" OnClick="() => Delete(context)">@localizer["Remove"]</MudButton>
                <MudButton Class="mud-secondary-text" OnClick="() => Edit(context.Id)">@localizer["Edit"]</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}


@code {
    private string _searchString = "";
    private CategoryDTO _selectedItem = null;
    private HashSet<CategoryDTO> _selectedItems = new HashSet<CategoryDTO>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _catsVM.OnChange += StateHasChanged;
        await _catsVM.GetItemsAsync();
    }

    void Add()
    {
        _navMngr.NavigateTo($"/Administration/Category/Edit/");
    }

    void Edit(int id)
    {
        _navMngr.NavigateTo($"/Administration/Category/Edit/{id}");
    }

    async Task Delete(CategoryDTO dto)
    {
        if (!await JS.InvokeAsync<bool>(
            "confirm",
            $"{localizer["RemovingConfirm"]} '{dto.ToString()}'"))
            return;

        await _catsVM.RemoveItemAsync(dto.Id);
    }

    public void Dispose()
    {
        _catsVM.OnChange -= StateHasChanged;
    }

    private bool FilterTable(CategoryDTO dto) => FilterFunc(dto, _searchString);

    private bool FilterFunc(CategoryDTO dto, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (dto.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
