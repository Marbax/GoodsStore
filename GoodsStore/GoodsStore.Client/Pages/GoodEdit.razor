@page "/Good/Edit"
@page "/Good/Edit/{ItemId:int}"
@inject IGenericItemVM<GoodDTO> _vm
@inject IGenericCollectionVM<ManufacturerDTO> _manufacturersVM
@inject IGenericCollectionVM<CategoryDTO> _categoriesVM
@inject IStringLocalizer<Resource> localizer

@using System
@using System.IO
@using Microsoft.AspNetCore.Components.Forms

@if (!_vm.IsReady)
{
    <Loading>@localizer["Loading"]...</Loading>
}
else
{
    <label class="text-muted mx-2">@_vm.Message</label>

    <EditForm Model="@_vm" OnValidSubmit="@HandleValidSubmit">
        <ValidationSummary />
        <div class="col-10 m-2 form-group flex-row">
            <label class="control-label col-md-4 font-weight-bold" for="title">@localizer["Title"]:</label>
            <InputText type="text" @bind-Value="_vm.Item.Title" name="title" class="form-control col" placeholder="@localizer["Title"]" />
            <ValidationMessage For="@(() => _vm.Item.Title)" />
        </div>
        <div class="col-10 m-2 form-group flex-row">
            <label class="control-label col-md-4 font-weight-bold" for="title">@localizer["Price"]:</label>
            <InputNumber type="number" @bind-Value="_vm.Item.Price" name="price" class="form-control col" placeholder="@localizer["Price"]" />
            <ValidationMessage For="@(() => _vm.Item.Price)" />
        </div>
        <div class="col-10 m-2 form-group flex-row">
            <label class="control-label col-md-4 font-weight-bold" for="title">@localizer["Count"]:</label>
            <InputNumber type="number" @bind-Value="_vm.Item.Count" name="count" class="form-control col" placeholder="@localizer["Count"]" />
            <ValidationMessage For="@(() => _vm.Item.Count)" />
        </div>
        @if (_manufacturersVM.IsReady)
        {
            <div class="col-10 m-2 form-group flex-row">
                <label class="control-label col-md-4 font-weight-bold" for="manufacturer">@localizer["Manufacturer"]:</label>
                <InputSelect @bind-Value="ManufacturerId" name="manufacturer" class="form-control col">
                    @foreach (var item in _manufacturersVM?.Items)
                            {
                        <option value="@item?.Id">@item?.Title</option>
                            }
                </InputSelect>
            </div>
        }
        @if (_categoriesVM.IsReady)
        {
            //TODO: make it looks like some normal and adaptive tag list
            <div class="col-10 m-2 form-group d-inline-block">
                <label class="control-label font-weight-bold d-inline" for="roles">@localizer["Categories"]:</label>
                <div class="col-12" name="roles">
                    @foreach (var item in _categoriesVM.Items)
                    {
                        <div class="mx-2">
                            <label for="@($"{item.Id}_{item.Title}")">@item.Title</label>
                            <input type="checkbox" id="@($"{item.Id}_{item.Title}")"
                                   checked=@(_vm.Item.Categories.Count()>0 && _vm.Item.Categories.Select(i=>i.Id).Contains(item.Id))
                                   @onchange="@((e) => CheckboxChanged(e, item.Id))" />
                        </div>
                    }
                </div>
            </div>
        }
        @if (_vm.Item.Categories.Count() > 0)
        {
            <div class="col-10 m-2 form-group flex-row">
                <label class="control-label col-md-4 font-weight-bold">@localizer["CategoriesCount"]: </label>
                <label class="control-label col">@_vm.Item.Categories.Count()</label>
            </div>
        }
        @if (_vm.Item.Photos.Count() > 0)
        {
            @if (_loadedFiles.Count > 0)
            {
                <div class="card">
                    <div class="card-body">
                        <ul>
                            @foreach (var file in _loadedFiles)
                            {
                                <li>
                                    File: @file.Name

                                </li>
                            }
                        </ul>
                    </div>
                </div>
            }
        }
    <div class="col-10 m-2 form-group flex-row">
        <label class="control-label col-md-4 font-weight-bold">@localizer["Photos"]: </label>
        @*<input type="file" @onchange="@OnInputFileChange" id="fileUpload" name="fileUpload" multiple />*@
        <InputFile OnChange="OnInputFileChange" multiple />
    </div>
        @if (ItemId > 0)
        {
            <div class="col-10 m-2">
                <button class="btn btn-success float-right" type="submit">@localizer["Update"]</button>
            </div>
        }
        else
        {
            <div class="col-10 m-2">
                <button class="btn btn-success float-right" type="submit">@localizer["Add"]</button>
            </div>
        }
    </EditForm>

}

@code {
    [Parameter]
    public int ItemId { get; set; } = -1;

    [Parameter]
    public string ManufacturerId { get; set; }

    private readonly int _fileSize = 6;
    private IReadOnlyList<IBrowserFile> _loadedFiles;


    protected override async Task OnInitializedAsync()
    {
        if (ItemId > 0)
            await _vm.GetItemAsync(ItemId);
        else
            _vm.Item = new GoodDTO();

        await _manufacturersVM.GetItemsAsync();
        await _categoriesVM.GetItemsAsync();
        ManufacturerId = _vm?.Item?.Manufacturer?.Id.ToString() ?? "1";
    }

    private async Task HandleValidSubmit()
    {
        _vm.Item.Manufacturer = _manufacturersVM.Items.Where(i => i.Id == int.Parse(ManufacturerId)).FirstOrDefault();

        if (ItemId > 0)
            await _vm.UpdateItem();
        else
            await _vm.AddItem();
    }

    private void CheckboxChanged(ChangeEventArgs e, int id)
    {
        var goodCategories = _vm.Item.Categories.ToList();
        if ((bool)e.Value == true)
        {
            goodCategories.Add(_categoriesVM.Items.First(i => i.Id == id));
            _vm.Item.Categories = goodCategories;
        }
        else if ((bool)e.Value == false)
        {
            goodCategories.RemoveAll(i => i.Id == id);
            _vm.Item.Categories = goodCategories;
        }
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        var loadedFiles = new List<IBrowserFile>();

        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                loadedFiles.Add(file);
            }
            catch (Exception ex)
            {
                _vm.Message = ex.Message;
            }
        }
        _loadedFiles = loadedFiles;
        this.StateHasChanged();
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        _loadedFiles = e.GetMultipleFiles();
        _vm.Message = $"{_loadedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }
}
